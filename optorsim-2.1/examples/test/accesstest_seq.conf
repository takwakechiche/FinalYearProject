#
# This file contains all the parameters required for OptorSim
# Using the Properties class to store this information every space
# in the key must be preceeded by a backslash.
#
grid.configuration.file = examples/test/accesstest_grid.conf
job.configuration.file = examples/test/accesstest_seqjobs.conf
bandwidth.configuration.file = examples/test/reptest_bw.conf
number.jobs = 1
#
# The choice of the scheduling alorithms for the RB is:
# (1) simple
# (2) getAccessCost() + job queue (RB calls getAccessCost multiple times) 
# (3) getAccessCost() + job queue (only one call to getAccessCost)
scheduler = 1
#
computing.element = 1
#
# The categories of users available are:
# (1) Simple - wait job delay between submitting jobs
# (2) Random - wait uniform random time between 0 and 2 * job delay
# (3) CMS DC04 Users
users = 1
#
# The choice of optimisers is:
# (1) SimpleOptimiser - no replication.
# (2) AlwaysReplicateOptimiser - always replicates, deleting oldest file.
# (3) DeleteLeastAccessedFileOptimiser - always replicates, deleting least
#        accessed file.
# (4) EcoModelOptimiser - replicates when eco-model says yes, deleting
#        least valuable file.
# (5) EcoModelOptimizer Zipf-like distribution
optimiser = 3
#
# automatically multiplied by scale factor
#
dt = 1000000
#
# The choice of access pattern generators is:
# (1) SequentialAccessGenerator - Files are accessed in order.
# (2) RandomAccessGenerator - Files are accessed using a flat random
#        distribution.
# (3) RandomWalkUnitaryAccessGenerator - Files are accessed using a
#        unitary random walk.
# (4) RandomWalkGaussianAccessGenerator - Files are accessed using a
#        Gaussian random walk.
# (5) RandomZipfAccessGenerator - Files are accessed using a
#         Zipf distribution
#
access.pattern.generator = 1
# Shape parameter for Zipf-like distribution > 0
shape = 0.85
#
# The initial file distribution is either "random" in which case the
# master files are distributed randomly to SEs or numbers separated
# commas (e.g. 8,10,15) giving the sites where all the masters
# should be evenly distributed.
# (in edg testbed site 8 is CERN)
#
initial.file.distribution = 0
#
# Do we want to fill all the SEs with replicas?
#
fill.all.sites = no
#
# The job delay is the interval in ms between the RB submitting each job.
# Automatically multiplied by scale factor
#
job.delay = 2500
#
# The random seed for deciding which jobs are chosen can be random or
# fixed.
#
random.seed = no
#
# The maximum queue size is the maximum number of jobs the JobHandler
# will keep in its queue.
#
max.queue.size = 200
#
#################
# Auction stuff #
#################
#
auction.flag = yes
# actually the number of sites contacted
hop.count = 50
timeout = 500
timeout.reduction.factor = 0.4
#
# Outputs auction information to auction.log. Can slow the
# simulation down a little bit.
#
auction.log = yes
#
#############################
# BandwidthReader stuff     #
#############################
# flag to switch background traffic on or off
background.bandwidth = on
#
# The directory in which your background bandwidth data files are stored
data.directory = examples/bw_data/edg_testbed/
#
# The datafile to use when no other background data are available. 
# For EDG, lyon_to_cern_ave.numbers is good; for UK dl_to_ncl_ave.numbers is good.
default.background = lyon_to_cern_ave.numbers
# 
# The time of day used as starting point. Should be in hours, with minutes after
# the decimal point e.g. 22.5 for 22:30, and must be on the hour or half-hour.
time.of.day = 0.0
#
#############
# GUI stuff #
#############
#
# Options to use the GUI and histogram browser
#
gui = no
#
##############
# Statistics #
##############
#
# Level of statistics to be printed out at the end of the simulation
# (1) None
# (2) Simple - only stats for the whole grid
# (3) Full - full stats for all elements on all sites
#
statistics = 3
#
##############
# Time Model #
##############
#
# use advanced grid time (yes) or not (no)
#
time.advance = yes
#
# end
#
